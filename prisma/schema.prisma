// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  bio         String?
  location    String?
  profileLink String   @unique @map("profileLink")
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  initiatedConnections Connection[] @relation("Initiator")
  receivedConnections  Connection[] @relation("Receiver")
  sentMessages         Message[]    @relation("Sender")
  receivedMessages     Message[]    @relation("Recipient")
  notifications        Notification[]

  @@map("users")
}

model Connection {
  id          String            @id @default(cuid())
  initiatorId String            @map("initiatorId")
  receiverId  String            @map("receiverId")
  status      ConnectionStatus  @default(PENDING)
  intent      String
  message     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relationships
  initiator User @relation("Initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  receiver  User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, receiverId])
  @@map("connections")
}

model Message {
  id           String      @id @default(cuid())
  content      String
  senderId     String      @map("senderId")
  recipientId  String      @map("recipientId")
  connectionId String      @map("connectionId")
  readAt       DateTime?
  createdAt    DateTime    @default(now())

  // Relationships
  sender    User @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("userId")
  type      NotificationType
  title     String
  content   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

enum NotificationType {
  CONNECTION_REQUEST
  CONNECTION_ACCEPTED
  MESSAGE_RECEIVED
  PROFILE_VIEW
}
